|CastleChaos
CLOCK_50 => CLOCK_50.IN2
KEY[0] => _.IN1
KEY[1] => ~NO_FANOUT~
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
SW[0] => ~NO_FANOUT~
SW[1] => SW[1].IN1
SW[2] => SW[2].IN1
SW[3] => SW[3].IN1
SW[4] => SW[4].IN1
SW[5] => ~NO_FANOUT~
SW[6] => SW[6].IN1
SW[7] => SW[7].IN1
SW[8] => SW[8].IN1
SW[9] => SW[9].IN1
SW[10] => ~NO_FANOUT~
SW[11] => ~NO_FANOUT~
SW[12] => ~NO_FANOUT~
SW[13] => ~NO_FANOUT~
SW[14] => ~NO_FANOUT~
SW[15] => ~NO_FANOUT~
SW[16] => ~NO_FANOUT~
SW[17] => resetn.IN1
VGA_CLK <= vga_adapter:VGA.VGA_CLK
VGA_HS <= vga_adapter:VGA.VGA_HS
VGA_VS <= vga_adapter:VGA.VGA_VS
VGA_BLANK_N <= vga_adapter:VGA.VGA_BLANK
VGA_SYNC_N <= vga_adapter:VGA.VGA_SYNC
VGA_R[0] <= vga_adapter:VGA.VGA_R
VGA_R[1] <= vga_adapter:VGA.VGA_R
VGA_R[2] <= vga_adapter:VGA.VGA_R
VGA_R[3] <= vga_adapter:VGA.VGA_R
VGA_R[4] <= vga_adapter:VGA.VGA_R
VGA_R[5] <= vga_adapter:VGA.VGA_R
VGA_R[6] <= vga_adapter:VGA.VGA_R
VGA_R[7] <= vga_adapter:VGA.VGA_R
VGA_R[8] <= vga_adapter:VGA.VGA_R
VGA_R[9] <= vga_adapter:VGA.VGA_R
VGA_G[0] <= vga_adapter:VGA.VGA_G
VGA_G[1] <= vga_adapter:VGA.VGA_G
VGA_G[2] <= vga_adapter:VGA.VGA_G
VGA_G[3] <= vga_adapter:VGA.VGA_G
VGA_G[4] <= vga_adapter:VGA.VGA_G
VGA_G[5] <= vga_adapter:VGA.VGA_G
VGA_G[6] <= vga_adapter:VGA.VGA_G
VGA_G[7] <= vga_adapter:VGA.VGA_G
VGA_G[8] <= vga_adapter:VGA.VGA_G
VGA_G[9] <= vga_adapter:VGA.VGA_G
VGA_B[0] <= vga_adapter:VGA.VGA_B
VGA_B[1] <= vga_adapter:VGA.VGA_B
VGA_B[2] <= vga_adapter:VGA.VGA_B
VGA_B[3] <= vga_adapter:VGA.VGA_B
VGA_B[4] <= vga_adapter:VGA.VGA_B
VGA_B[5] <= vga_adapter:VGA.VGA_B
VGA_B[6] <= vga_adapter:VGA.VGA_B
VGA_B[7] <= vga_adapter:VGA.VGA_B
VGA_B[8] <= vga_adapter:VGA.VGA_B
VGA_B[9] <= vga_adapter:VGA.VGA_B
HEX0[0] <= hex_decoder:hex0.segments
HEX0[1] <= hex_decoder:hex0.segments
HEX0[2] <= hex_decoder:hex0.segments
HEX0[3] <= hex_decoder:hex0.segments
HEX0[4] <= hex_decoder:hex0.segments
HEX0[5] <= hex_decoder:hex0.segments
HEX0[6] <= hex_decoder:hex0.segments
HEX1[0] <= hex_decoder:hex1.segments
HEX1[1] <= hex_decoder:hex1.segments
HEX1[2] <= hex_decoder:hex1.segments
HEX1[3] <= hex_decoder:hex1.segments
HEX1[4] <= hex_decoder:hex1.segments
HEX1[5] <= hex_decoder:hex1.segments
HEX1[6] <= hex_decoder:hex1.segments
HEX2[0] <= hex_decoder:hex2.segments
HEX2[1] <= hex_decoder:hex2.segments
HEX2[2] <= hex_decoder:hex2.segments
HEX2[3] <= hex_decoder:hex2.segments
HEX2[4] <= hex_decoder:hex2.segments
HEX2[5] <= hex_decoder:hex2.segments
HEX2[6] <= hex_decoder:hex2.segments
HEX3[0] <= hex_decoder:hex3.segments
HEX3[1] <= hex_decoder:hex3.segments
HEX3[2] <= hex_decoder:hex3.segments
HEX3[3] <= hex_decoder:hex3.segments
HEX3[4] <= hex_decoder:hex3.segments
HEX3[5] <= hex_decoder:hex3.segments
HEX3[6] <= hex_decoder:hex3.segments
HEX4[0] <= hex_decoder:hex4.segments
HEX4[1] <= hex_decoder:hex4.segments
HEX4[2] <= hex_decoder:hex4.segments
HEX4[3] <= hex_decoder:hex4.segments
HEX4[4] <= hex_decoder:hex4.segments
HEX4[5] <= hex_decoder:hex4.segments
HEX4[6] <= hex_decoder:hex4.segments
HEX5[0] <= hex_decoder:hex5.segments
HEX5[1] <= hex_decoder:hex5.segments
HEX5[2] <= hex_decoder:hex5.segments
HEX5[3] <= hex_decoder:hex5.segments
HEX5[4] <= hex_decoder:hex5.segments
HEX5[5] <= hex_decoder:hex5.segments
HEX5[6] <= hex_decoder:hex5.segments
HEX6[0] <= hex_decoder:hex6.segments
HEX6[1] <= hex_decoder:hex6.segments
HEX6[2] <= hex_decoder:hex6.segments
HEX6[3] <= hex_decoder:hex6.segments
HEX6[4] <= hex_decoder:hex6.segments
HEX6[5] <= hex_decoder:hex6.segments
HEX6[6] <= hex_decoder:hex6.segments
HEX7[0] <= hex_decoder:hex7.segments
HEX7[1] <= hex_decoder:hex7.segments
HEX7[2] <= hex_decoder:hex7.segments
HEX7[3] <= hex_decoder:hex7.segments
HEX7[4] <= hex_decoder:hex7.segments
HEX7[5] <= hex_decoder:hex7.segments
HEX7[6] <= hex_decoder:hex7.segments


|CastleChaos|vga_adapter:VGA
resetn => resetn.IN1
clock => clock.IN2
colour[0] => colour[0].IN1
colour[1] => colour[1].IN1
colour[2] => colour[2].IN1
x[0] => x[0].IN1
x[1] => x[1].IN1
x[2] => x[2].IN1
x[3] => x[3].IN1
x[4] => x[4].IN1
x[5] => x[5].IN1
x[6] => x[6].IN1
x[7] => x[7].IN1
y[0] => y[0].IN1
y[1] => y[1].IN1
y[2] => y[2].IN1
y[3] => y[3].IN1
y[4] => y[4].IN1
y[5] => y[5].IN1
y[6] => y[6].IN1
plot => writeEn.IN1
VGA_R[0] <= vga_controller:controller.VGA_R
VGA_R[1] <= vga_controller:controller.VGA_R
VGA_R[2] <= vga_controller:controller.VGA_R
VGA_R[3] <= vga_controller:controller.VGA_R
VGA_R[4] <= vga_controller:controller.VGA_R
VGA_R[5] <= vga_controller:controller.VGA_R
VGA_R[6] <= vga_controller:controller.VGA_R
VGA_R[7] <= vga_controller:controller.VGA_R
VGA_R[8] <= vga_controller:controller.VGA_R
VGA_R[9] <= vga_controller:controller.VGA_R
VGA_G[0] <= vga_controller:controller.VGA_G
VGA_G[1] <= vga_controller:controller.VGA_G
VGA_G[2] <= vga_controller:controller.VGA_G
VGA_G[3] <= vga_controller:controller.VGA_G
VGA_G[4] <= vga_controller:controller.VGA_G
VGA_G[5] <= vga_controller:controller.VGA_G
VGA_G[6] <= vga_controller:controller.VGA_G
VGA_G[7] <= vga_controller:controller.VGA_G
VGA_G[8] <= vga_controller:controller.VGA_G
VGA_G[9] <= vga_controller:controller.VGA_G
VGA_B[0] <= vga_controller:controller.VGA_B
VGA_B[1] <= vga_controller:controller.VGA_B
VGA_B[2] <= vga_controller:controller.VGA_B
VGA_B[3] <= vga_controller:controller.VGA_B
VGA_B[4] <= vga_controller:controller.VGA_B
VGA_B[5] <= vga_controller:controller.VGA_B
VGA_B[6] <= vga_controller:controller.VGA_B
VGA_B[7] <= vga_controller:controller.VGA_B
VGA_B[8] <= vga_controller:controller.VGA_B
VGA_B[9] <= vga_controller:controller.VGA_B
VGA_HS <= vga_controller:controller.VGA_HS
VGA_VS <= vga_controller:controller.VGA_VS
VGA_BLANK <= vga_controller:controller.VGA_BLANK
VGA_SYNC <= vga_controller:controller.VGA_SYNC
VGA_CLK <= vga_controller:controller.VGA_CLK


|CastleChaos|vga_adapter:VGA|vga_address_translator:user_input_translator
x[0] => mem_address[0].DATAIN
x[1] => mem_address[1].DATAIN
x[2] => mem_address[2].DATAIN
x[3] => mem_address[3].DATAIN
x[4] => mem_address[4].DATAIN
x[5] => Add1.IN18
x[6] => Add1.IN17
x[7] => Add1.IN16
y[0] => Add0.IN14
y[0] => Add1.IN20
y[1] => Add0.IN13
y[1] => Add1.IN19
y[2] => Add0.IN11
y[2] => Add0.IN12
y[3] => Add0.IN9
y[3] => Add0.IN10
y[4] => Add0.IN7
y[4] => Add0.IN8
y[5] => Add0.IN5
y[5] => Add0.IN6
y[6] => Add0.IN3
y[6] => Add0.IN4
mem_address[0] <= x[0].DB_MAX_OUTPUT_PORT_TYPE
mem_address[1] <= x[1].DB_MAX_OUTPUT_PORT_TYPE
mem_address[2] <= x[2].DB_MAX_OUTPUT_PORT_TYPE
mem_address[3] <= x[3].DB_MAX_OUTPUT_PORT_TYPE
mem_address[4] <= x[4].DB_MAX_OUTPUT_PORT_TYPE
mem_address[5] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[6] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[7] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[8] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[9] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[10] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[11] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[12] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[13] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[14] <= Add1.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory
wren_a => altsyncram_60g1:auto_generated.wren_a
rden_a => ~NO_FANOUT~
wren_b => ~NO_FANOUT~
rden_b => ~NO_FANOUT~
data_a[0] => altsyncram_60g1:auto_generated.data_a[0]
data_a[1] => altsyncram_60g1:auto_generated.data_a[1]
data_a[2] => altsyncram_60g1:auto_generated.data_a[2]
data_b[0] => ~NO_FANOUT~
data_b[1] => ~NO_FANOUT~
data_b[2] => ~NO_FANOUT~
address_a[0] => altsyncram_60g1:auto_generated.address_a[0]
address_a[1] => altsyncram_60g1:auto_generated.address_a[1]
address_a[2] => altsyncram_60g1:auto_generated.address_a[2]
address_a[3] => altsyncram_60g1:auto_generated.address_a[3]
address_a[4] => altsyncram_60g1:auto_generated.address_a[4]
address_a[5] => altsyncram_60g1:auto_generated.address_a[5]
address_a[6] => altsyncram_60g1:auto_generated.address_a[6]
address_a[7] => altsyncram_60g1:auto_generated.address_a[7]
address_a[8] => altsyncram_60g1:auto_generated.address_a[8]
address_a[9] => altsyncram_60g1:auto_generated.address_a[9]
address_a[10] => altsyncram_60g1:auto_generated.address_a[10]
address_a[11] => altsyncram_60g1:auto_generated.address_a[11]
address_a[12] => altsyncram_60g1:auto_generated.address_a[12]
address_a[13] => altsyncram_60g1:auto_generated.address_a[13]
address_a[14] => altsyncram_60g1:auto_generated.address_a[14]
address_b[0] => altsyncram_60g1:auto_generated.address_b[0]
address_b[1] => altsyncram_60g1:auto_generated.address_b[1]
address_b[2] => altsyncram_60g1:auto_generated.address_b[2]
address_b[3] => altsyncram_60g1:auto_generated.address_b[3]
address_b[4] => altsyncram_60g1:auto_generated.address_b[4]
address_b[5] => altsyncram_60g1:auto_generated.address_b[5]
address_b[6] => altsyncram_60g1:auto_generated.address_b[6]
address_b[7] => altsyncram_60g1:auto_generated.address_b[7]
address_b[8] => altsyncram_60g1:auto_generated.address_b[8]
address_b[9] => altsyncram_60g1:auto_generated.address_b[9]
address_b[10] => altsyncram_60g1:auto_generated.address_b[10]
address_b[11] => altsyncram_60g1:auto_generated.address_b[11]
address_b[12] => altsyncram_60g1:auto_generated.address_b[12]
address_b[13] => altsyncram_60g1:auto_generated.address_b[13]
address_b[14] => altsyncram_60g1:auto_generated.address_b[14]
addressstall_a => ~NO_FANOUT~
addressstall_b => ~NO_FANOUT~
clock0 => altsyncram_60g1:auto_generated.clock0
clock1 => altsyncram_60g1:auto_generated.clock1
clocken0 => ~NO_FANOUT~
clocken1 => ~NO_FANOUT~
clocken2 => ~NO_FANOUT~
clocken3 => ~NO_FANOUT~
aclr0 => ~NO_FANOUT~
aclr1 => ~NO_FANOUT~
byteena_a[0] => ~NO_FANOUT~
byteena_b[0] => ~NO_FANOUT~
q_a[0] <= <GND>
q_a[1] <= <GND>
q_a[2] <= <GND>
q_b[0] <= altsyncram_60g1:auto_generated.q_b[0]
q_b[1] <= altsyncram_60g1:auto_generated.q_b[1]
q_b[2] <= altsyncram_60g1:auto_generated.q_b[2]
eccstatus[0] <= <GND>
eccstatus[1] <= <GND>
eccstatus[2] <= <GND>


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory|altsyncram_60g1:auto_generated
address_a[0] => ram_block1a0.PORTAADDR
address_a[0] => ram_block1a1.PORTAADDR
address_a[0] => ram_block1a2.PORTAADDR
address_a[0] => ram_block1a3.PORTAADDR
address_a[0] => ram_block1a4.PORTAADDR
address_a[0] => ram_block1a5.PORTAADDR
address_a[0] => ram_block1a6.PORTAADDR
address_a[0] => ram_block1a7.PORTAADDR
address_a[0] => ram_block1a8.PORTAADDR
address_a[1] => ram_block1a0.PORTAADDR1
address_a[1] => ram_block1a1.PORTAADDR1
address_a[1] => ram_block1a2.PORTAADDR1
address_a[1] => ram_block1a3.PORTAADDR1
address_a[1] => ram_block1a4.PORTAADDR1
address_a[1] => ram_block1a5.PORTAADDR1
address_a[1] => ram_block1a6.PORTAADDR1
address_a[1] => ram_block1a7.PORTAADDR1
address_a[1] => ram_block1a8.PORTAADDR1
address_a[2] => ram_block1a0.PORTAADDR2
address_a[2] => ram_block1a1.PORTAADDR2
address_a[2] => ram_block1a2.PORTAADDR2
address_a[2] => ram_block1a3.PORTAADDR2
address_a[2] => ram_block1a4.PORTAADDR2
address_a[2] => ram_block1a5.PORTAADDR2
address_a[2] => ram_block1a6.PORTAADDR2
address_a[2] => ram_block1a7.PORTAADDR2
address_a[2] => ram_block1a8.PORTAADDR2
address_a[3] => ram_block1a0.PORTAADDR3
address_a[3] => ram_block1a1.PORTAADDR3
address_a[3] => ram_block1a2.PORTAADDR3
address_a[3] => ram_block1a3.PORTAADDR3
address_a[3] => ram_block1a4.PORTAADDR3
address_a[3] => ram_block1a5.PORTAADDR3
address_a[3] => ram_block1a6.PORTAADDR3
address_a[3] => ram_block1a7.PORTAADDR3
address_a[3] => ram_block1a8.PORTAADDR3
address_a[4] => ram_block1a0.PORTAADDR4
address_a[4] => ram_block1a1.PORTAADDR4
address_a[4] => ram_block1a2.PORTAADDR4
address_a[4] => ram_block1a3.PORTAADDR4
address_a[4] => ram_block1a4.PORTAADDR4
address_a[4] => ram_block1a5.PORTAADDR4
address_a[4] => ram_block1a6.PORTAADDR4
address_a[4] => ram_block1a7.PORTAADDR4
address_a[4] => ram_block1a8.PORTAADDR4
address_a[5] => ram_block1a0.PORTAADDR5
address_a[5] => ram_block1a1.PORTAADDR5
address_a[5] => ram_block1a2.PORTAADDR5
address_a[5] => ram_block1a3.PORTAADDR5
address_a[5] => ram_block1a4.PORTAADDR5
address_a[5] => ram_block1a5.PORTAADDR5
address_a[5] => ram_block1a6.PORTAADDR5
address_a[5] => ram_block1a7.PORTAADDR5
address_a[5] => ram_block1a8.PORTAADDR5
address_a[6] => ram_block1a0.PORTAADDR6
address_a[6] => ram_block1a1.PORTAADDR6
address_a[6] => ram_block1a2.PORTAADDR6
address_a[6] => ram_block1a3.PORTAADDR6
address_a[6] => ram_block1a4.PORTAADDR6
address_a[6] => ram_block1a5.PORTAADDR6
address_a[6] => ram_block1a6.PORTAADDR6
address_a[6] => ram_block1a7.PORTAADDR6
address_a[6] => ram_block1a8.PORTAADDR6
address_a[7] => ram_block1a0.PORTAADDR7
address_a[7] => ram_block1a1.PORTAADDR7
address_a[7] => ram_block1a2.PORTAADDR7
address_a[7] => ram_block1a3.PORTAADDR7
address_a[7] => ram_block1a4.PORTAADDR7
address_a[7] => ram_block1a5.PORTAADDR7
address_a[7] => ram_block1a6.PORTAADDR7
address_a[7] => ram_block1a7.PORTAADDR7
address_a[7] => ram_block1a8.PORTAADDR7
address_a[8] => ram_block1a0.PORTAADDR8
address_a[8] => ram_block1a1.PORTAADDR8
address_a[8] => ram_block1a2.PORTAADDR8
address_a[8] => ram_block1a3.PORTAADDR8
address_a[8] => ram_block1a4.PORTAADDR8
address_a[8] => ram_block1a5.PORTAADDR8
address_a[8] => ram_block1a6.PORTAADDR8
address_a[8] => ram_block1a7.PORTAADDR8
address_a[8] => ram_block1a8.PORTAADDR8
address_a[9] => ram_block1a0.PORTAADDR9
address_a[9] => ram_block1a1.PORTAADDR9
address_a[9] => ram_block1a2.PORTAADDR9
address_a[9] => ram_block1a3.PORTAADDR9
address_a[9] => ram_block1a4.PORTAADDR9
address_a[9] => ram_block1a5.PORTAADDR9
address_a[9] => ram_block1a6.PORTAADDR9
address_a[9] => ram_block1a7.PORTAADDR9
address_a[9] => ram_block1a8.PORTAADDR9
address_a[10] => ram_block1a0.PORTAADDR10
address_a[10] => ram_block1a1.PORTAADDR10
address_a[10] => ram_block1a2.PORTAADDR10
address_a[10] => ram_block1a3.PORTAADDR10
address_a[10] => ram_block1a4.PORTAADDR10
address_a[10] => ram_block1a5.PORTAADDR10
address_a[10] => ram_block1a6.PORTAADDR10
address_a[10] => ram_block1a7.PORTAADDR10
address_a[10] => ram_block1a8.PORTAADDR10
address_a[11] => ram_block1a0.PORTAADDR11
address_a[11] => ram_block1a1.PORTAADDR11
address_a[11] => ram_block1a2.PORTAADDR11
address_a[11] => ram_block1a3.PORTAADDR11
address_a[11] => ram_block1a4.PORTAADDR11
address_a[11] => ram_block1a5.PORTAADDR11
address_a[11] => ram_block1a6.PORTAADDR11
address_a[11] => ram_block1a7.PORTAADDR11
address_a[11] => ram_block1a8.PORTAADDR11
address_a[12] => ram_block1a0.PORTAADDR12
address_a[12] => ram_block1a1.PORTAADDR12
address_a[12] => ram_block1a2.PORTAADDR12
address_a[12] => ram_block1a3.PORTAADDR12
address_a[12] => ram_block1a4.PORTAADDR12
address_a[12] => ram_block1a5.PORTAADDR12
address_a[13] => decode_lsa:decode2.data[0]
address_a[13] => decode_lsa:wren_decode_a.data[0]
address_a[14] => decode_lsa:decode2.data[1]
address_a[14] => decode_lsa:wren_decode_a.data[1]
address_b[0] => ram_block1a0.PORTBADDR
address_b[0] => ram_block1a1.PORTBADDR
address_b[0] => ram_block1a2.PORTBADDR
address_b[0] => ram_block1a3.PORTBADDR
address_b[0] => ram_block1a4.PORTBADDR
address_b[0] => ram_block1a5.PORTBADDR
address_b[0] => ram_block1a6.PORTBADDR
address_b[0] => ram_block1a7.PORTBADDR
address_b[0] => ram_block1a8.PORTBADDR
address_b[1] => ram_block1a0.PORTBADDR1
address_b[1] => ram_block1a1.PORTBADDR1
address_b[1] => ram_block1a2.PORTBADDR1
address_b[1] => ram_block1a3.PORTBADDR1
address_b[1] => ram_block1a4.PORTBADDR1
address_b[1] => ram_block1a5.PORTBADDR1
address_b[1] => ram_block1a6.PORTBADDR1
address_b[1] => ram_block1a7.PORTBADDR1
address_b[1] => ram_block1a8.PORTBADDR1
address_b[2] => ram_block1a0.PORTBADDR2
address_b[2] => ram_block1a1.PORTBADDR2
address_b[2] => ram_block1a2.PORTBADDR2
address_b[2] => ram_block1a3.PORTBADDR2
address_b[2] => ram_block1a4.PORTBADDR2
address_b[2] => ram_block1a5.PORTBADDR2
address_b[2] => ram_block1a6.PORTBADDR2
address_b[2] => ram_block1a7.PORTBADDR2
address_b[2] => ram_block1a8.PORTBADDR2
address_b[3] => ram_block1a0.PORTBADDR3
address_b[3] => ram_block1a1.PORTBADDR3
address_b[3] => ram_block1a2.PORTBADDR3
address_b[3] => ram_block1a3.PORTBADDR3
address_b[3] => ram_block1a4.PORTBADDR3
address_b[3] => ram_block1a5.PORTBADDR3
address_b[3] => ram_block1a6.PORTBADDR3
address_b[3] => ram_block1a7.PORTBADDR3
address_b[3] => ram_block1a8.PORTBADDR3
address_b[4] => ram_block1a0.PORTBADDR4
address_b[4] => ram_block1a1.PORTBADDR4
address_b[4] => ram_block1a2.PORTBADDR4
address_b[4] => ram_block1a3.PORTBADDR4
address_b[4] => ram_block1a4.PORTBADDR4
address_b[4] => ram_block1a5.PORTBADDR4
address_b[4] => ram_block1a6.PORTBADDR4
address_b[4] => ram_block1a7.PORTBADDR4
address_b[4] => ram_block1a8.PORTBADDR4
address_b[5] => ram_block1a0.PORTBADDR5
address_b[5] => ram_block1a1.PORTBADDR5
address_b[5] => ram_block1a2.PORTBADDR5
address_b[5] => ram_block1a3.PORTBADDR5
address_b[5] => ram_block1a4.PORTBADDR5
address_b[5] => ram_block1a5.PORTBADDR5
address_b[5] => ram_block1a6.PORTBADDR5
address_b[5] => ram_block1a7.PORTBADDR5
address_b[5] => ram_block1a8.PORTBADDR5
address_b[6] => ram_block1a0.PORTBADDR6
address_b[6] => ram_block1a1.PORTBADDR6
address_b[6] => ram_block1a2.PORTBADDR6
address_b[6] => ram_block1a3.PORTBADDR6
address_b[6] => ram_block1a4.PORTBADDR6
address_b[6] => ram_block1a5.PORTBADDR6
address_b[6] => ram_block1a6.PORTBADDR6
address_b[6] => ram_block1a7.PORTBADDR6
address_b[6] => ram_block1a8.PORTBADDR6
address_b[7] => ram_block1a0.PORTBADDR7
address_b[7] => ram_block1a1.PORTBADDR7
address_b[7] => ram_block1a2.PORTBADDR7
address_b[7] => ram_block1a3.PORTBADDR7
address_b[7] => ram_block1a4.PORTBADDR7
address_b[7] => ram_block1a5.PORTBADDR7
address_b[7] => ram_block1a6.PORTBADDR7
address_b[7] => ram_block1a7.PORTBADDR7
address_b[7] => ram_block1a8.PORTBADDR7
address_b[8] => ram_block1a0.PORTBADDR8
address_b[8] => ram_block1a1.PORTBADDR8
address_b[8] => ram_block1a2.PORTBADDR8
address_b[8] => ram_block1a3.PORTBADDR8
address_b[8] => ram_block1a4.PORTBADDR8
address_b[8] => ram_block1a5.PORTBADDR8
address_b[8] => ram_block1a6.PORTBADDR8
address_b[8] => ram_block1a7.PORTBADDR8
address_b[8] => ram_block1a8.PORTBADDR8
address_b[9] => ram_block1a0.PORTBADDR9
address_b[9] => ram_block1a1.PORTBADDR9
address_b[9] => ram_block1a2.PORTBADDR9
address_b[9] => ram_block1a3.PORTBADDR9
address_b[9] => ram_block1a4.PORTBADDR9
address_b[9] => ram_block1a5.PORTBADDR9
address_b[9] => ram_block1a6.PORTBADDR9
address_b[9] => ram_block1a7.PORTBADDR9
address_b[9] => ram_block1a8.PORTBADDR9
address_b[10] => ram_block1a0.PORTBADDR10
address_b[10] => ram_block1a1.PORTBADDR10
address_b[10] => ram_block1a2.PORTBADDR10
address_b[10] => ram_block1a3.PORTBADDR10
address_b[10] => ram_block1a4.PORTBADDR10
address_b[10] => ram_block1a5.PORTBADDR10
address_b[10] => ram_block1a6.PORTBADDR10
address_b[10] => ram_block1a7.PORTBADDR10
address_b[10] => ram_block1a8.PORTBADDR10
address_b[11] => ram_block1a0.PORTBADDR11
address_b[11] => ram_block1a1.PORTBADDR11
address_b[11] => ram_block1a2.PORTBADDR11
address_b[11] => ram_block1a3.PORTBADDR11
address_b[11] => ram_block1a4.PORTBADDR11
address_b[11] => ram_block1a5.PORTBADDR11
address_b[11] => ram_block1a6.PORTBADDR11
address_b[11] => ram_block1a7.PORTBADDR11
address_b[11] => ram_block1a8.PORTBADDR11
address_b[12] => ram_block1a0.PORTBADDR12
address_b[12] => ram_block1a1.PORTBADDR12
address_b[12] => ram_block1a2.PORTBADDR12
address_b[12] => ram_block1a3.PORTBADDR12
address_b[12] => ram_block1a4.PORTBADDR12
address_b[12] => ram_block1a5.PORTBADDR12
address_b[13] => address_reg_b[0].DATAIN
address_b[13] => decode_e8a:rden_decode_b.data[0]
address_b[14] => address_reg_b[1].DATAIN
address_b[14] => decode_e8a:rden_decode_b.data[1]
clock0 => ram_block1a0.CLK0
clock0 => ram_block1a1.CLK0
clock0 => ram_block1a2.CLK0
clock0 => ram_block1a3.CLK0
clock0 => ram_block1a4.CLK0
clock0 => ram_block1a5.CLK0
clock0 => ram_block1a6.CLK0
clock0 => ram_block1a7.CLK0
clock0 => ram_block1a8.CLK0
clock1 => ram_block1a0.CLK1
clock1 => ram_block1a1.CLK1
clock1 => ram_block1a2.CLK1
clock1 => ram_block1a3.CLK1
clock1 => ram_block1a4.CLK1
clock1 => ram_block1a5.CLK1
clock1 => ram_block1a6.CLK1
clock1 => ram_block1a7.CLK1
clock1 => ram_block1a8.CLK1
clock1 => address_reg_b[1].CLK
clock1 => address_reg_b[0].CLK
clock1 => out_address_reg_b[1].CLK
clock1 => out_address_reg_b[0].CLK
data_a[0] => ram_block1a0.PORTADATAIN
data_a[0] => ram_block1a3.PORTADATAIN
data_a[0] => ram_block1a6.PORTADATAIN
data_a[1] => ram_block1a1.PORTADATAIN
data_a[1] => ram_block1a4.PORTADATAIN
data_a[1] => ram_block1a7.PORTADATAIN
data_a[2] => ram_block1a2.PORTADATAIN
data_a[2] => ram_block1a5.PORTADATAIN
data_a[2] => ram_block1a8.PORTADATAIN
q_b[0] <= mux_0nb:mux3.result[0]
q_b[1] <= mux_0nb:mux3.result[1]
q_b[2] <= mux_0nb:mux3.result[2]
wren_a => decode_lsa:decode2.enable
wren_a => decode_lsa:wren_decode_a.enable


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory|altsyncram_60g1:auto_generated|decode_lsa:decode2
data[0] => w_anode105w[1].IN0
data[0] => w_anode118w[1].IN1
data[0] => w_anode126w[1].IN0
data[0] => w_anode134w[1].IN1
data[1] => w_anode105w[2].IN0
data[1] => w_anode118w[2].IN0
data[1] => w_anode126w[2].IN1
data[1] => w_anode134w[2].IN1
enable => w_anode105w[1].IN0
enable => w_anode118w[1].IN0
enable => w_anode126w[1].IN0
enable => w_anode134w[1].IN0
eq[0] <= w_anode105w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[1] <= w_anode118w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[2] <= w_anode126w[2].DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory|altsyncram_60g1:auto_generated|decode_e8a:rden_decode_b
data[0] => w_anode143w[1].IN0
data[0] => w_anode157w[1].IN1
data[0] => w_anode166w[1].IN0
data[0] => w_anode175w[1].IN1
data[1] => w_anode143w[2].IN0
data[1] => w_anode157w[2].IN0
data[1] => w_anode166w[2].IN1
data[1] => w_anode175w[2].IN1
eq[0] <= w_anode143w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[1] <= w_anode157w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[2] <= w_anode166w[2].DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory|altsyncram_60g1:auto_generated|decode_lsa:wren_decode_a
data[0] => w_anode105w[1].IN0
data[0] => w_anode118w[1].IN1
data[0] => w_anode126w[1].IN0
data[0] => w_anode134w[1].IN1
data[1] => w_anode105w[2].IN0
data[1] => w_anode118w[2].IN0
data[1] => w_anode126w[2].IN1
data[1] => w_anode134w[2].IN1
enable => w_anode105w[1].IN0
enable => w_anode118w[1].IN0
enable => w_anode126w[1].IN0
enable => w_anode134w[1].IN0
eq[0] <= w_anode105w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[1] <= w_anode118w[2].DB_MAX_OUTPUT_PORT_TYPE
eq[2] <= w_anode126w[2].DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|vga_adapter:VGA|altsyncram:VideoMemory|altsyncram_60g1:auto_generated|mux_0nb:mux3
data[0] => data0_wire[0].IN0
data[1] => data0_wire[1].IN0
data[2] => data0_wire[2].IN0
data[3] => data1_wire[0].IN0
data[4] => data1_wire[1].IN0
data[5] => data1_wire[2].IN0
data[6] => data2_wire[0].IN0
data[7] => data2_wire[1].IN0
data[8] => data2_wire[2].IN0
result[0] <= result_node[0].DB_MAX_OUTPUT_PORT_TYPE
result[1] <= result_node[1].DB_MAX_OUTPUT_PORT_TYPE
result[2] <= result_node[2].DB_MAX_OUTPUT_PORT_TYPE
sel[0] => data0_wire[2].IN0
sel[0] => data1_wire[2].IN1
sel[0] => data1_wire[1].IN1
sel[0] => data1_wire[0].IN1
sel[1] => data2_wire[2].IN1
sel[1] => data2_wire[1].IN1
sel[1] => data2_wire[0].IN1
sel[1] => _.IN0


|CastleChaos|vga_adapter:VGA|vga_pll:mypll
clock_in => clock_input_bus[0].IN1
clock_out <= altpll:altpll_component.clk


|CastleChaos|vga_adapter:VGA|vga_pll:mypll|altpll:altpll_component
inclk[0] => pll.CLK
inclk[1] => pll.CLK1
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => ~NO_FANOUT~
areset => ~NO_FANOUT~
pfdena => ~NO_FANOUT~
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
scanclkena => ~NO_FANOUT~
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => ~NO_FANOUT~
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => ~NO_FANOUT~
fbmimicbidir <> <GND>
clk[0] <= clk[0].DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1].DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2].DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= <GND>
clk[4] <= <GND>
clk[5] <= <GND>
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= <GND>
scandataout <= <GND>
scandone <= <GND>
sclkout0 <= <GND>
sclkout1 <= sclkout1.DB_MAX_OUTPUT_PORT_TYPE
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>
fref <= <GND>
icdrclk <= <GND>


|CastleChaos|vga_adapter:VGA|vga_controller:controller
vga_clock => VGA_BLANK~reg0.CLK
vga_clock => VGA_VS~reg0.CLK
vga_clock => VGA_HS~reg0.CLK
vga_clock => VGA_BLANK1.CLK
vga_clock => VGA_VS1.CLK
vga_clock => VGA_HS1.CLK
vga_clock => yCounter[0].CLK
vga_clock => yCounter[1].CLK
vga_clock => yCounter[2].CLK
vga_clock => yCounter[3].CLK
vga_clock => yCounter[4].CLK
vga_clock => yCounter[5].CLK
vga_clock => yCounter[6].CLK
vga_clock => yCounter[7].CLK
vga_clock => yCounter[8].CLK
vga_clock => yCounter[9].CLK
vga_clock => xCounter[0].CLK
vga_clock => xCounter[1].CLK
vga_clock => xCounter[2].CLK
vga_clock => xCounter[3].CLK
vga_clock => xCounter[4].CLK
vga_clock => xCounter[5].CLK
vga_clock => xCounter[6].CLK
vga_clock => xCounter[7].CLK
vga_clock => xCounter[8].CLK
vga_clock => xCounter[9].CLK
vga_clock => VGA_CLK.DATAIN
resetn => xCounter[0].ACLR
resetn => xCounter[1].ACLR
resetn => xCounter[2].ACLR
resetn => xCounter[3].ACLR
resetn => xCounter[4].ACLR
resetn => xCounter[5].ACLR
resetn => xCounter[6].ACLR
resetn => xCounter[7].ACLR
resetn => xCounter[8].ACLR
resetn => xCounter[9].ACLR
resetn => yCounter[0].ACLR
resetn => yCounter[1].ACLR
resetn => yCounter[2].ACLR
resetn => yCounter[3].ACLR
resetn => yCounter[4].ACLR
resetn => yCounter[5].ACLR
resetn => yCounter[6].ACLR
resetn => yCounter[7].ACLR
resetn => yCounter[8].ACLR
resetn => yCounter[9].ACLR
pixel_colour[0] => VGA_B[0].DATAIN
pixel_colour[0] => VGA_B[9].DATAIN
pixel_colour[0] => VGA_B[8].DATAIN
pixel_colour[0] => VGA_B[7].DATAIN
pixel_colour[0] => VGA_B[6].DATAIN
pixel_colour[0] => VGA_B[5].DATAIN
pixel_colour[0] => VGA_B[4].DATAIN
pixel_colour[0] => VGA_B[3].DATAIN
pixel_colour[0] => VGA_B[2].DATAIN
pixel_colour[0] => VGA_B[1].DATAIN
pixel_colour[1] => VGA_G[0].DATAIN
pixel_colour[1] => VGA_G[9].DATAIN
pixel_colour[1] => VGA_G[8].DATAIN
pixel_colour[1] => VGA_G[7].DATAIN
pixel_colour[1] => VGA_G[6].DATAIN
pixel_colour[1] => VGA_G[5].DATAIN
pixel_colour[1] => VGA_G[4].DATAIN
pixel_colour[1] => VGA_G[3].DATAIN
pixel_colour[1] => VGA_G[2].DATAIN
pixel_colour[1] => VGA_G[1].DATAIN
pixel_colour[2] => VGA_R[0].DATAIN
pixel_colour[2] => VGA_R[9].DATAIN
pixel_colour[2] => VGA_R[8].DATAIN
pixel_colour[2] => VGA_R[7].DATAIN
pixel_colour[2] => VGA_R[6].DATAIN
pixel_colour[2] => VGA_R[5].DATAIN
pixel_colour[2] => VGA_R[4].DATAIN
pixel_colour[2] => VGA_R[3].DATAIN
pixel_colour[2] => VGA_R[2].DATAIN
pixel_colour[2] => VGA_R[1].DATAIN
memory_address[0] <= vga_address_translator:controller_translator.mem_address
memory_address[1] <= vga_address_translator:controller_translator.mem_address
memory_address[2] <= vga_address_translator:controller_translator.mem_address
memory_address[3] <= vga_address_translator:controller_translator.mem_address
memory_address[4] <= vga_address_translator:controller_translator.mem_address
memory_address[5] <= vga_address_translator:controller_translator.mem_address
memory_address[6] <= vga_address_translator:controller_translator.mem_address
memory_address[7] <= vga_address_translator:controller_translator.mem_address
memory_address[8] <= vga_address_translator:controller_translator.mem_address
memory_address[9] <= vga_address_translator:controller_translator.mem_address
memory_address[10] <= vga_address_translator:controller_translator.mem_address
memory_address[11] <= vga_address_translator:controller_translator.mem_address
memory_address[12] <= vga_address_translator:controller_translator.mem_address
memory_address[13] <= vga_address_translator:controller_translator.mem_address
memory_address[14] <= vga_address_translator:controller_translator.mem_address
VGA_R[0] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[1] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[2] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[3] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[4] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[5] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[6] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[7] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[8] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_R[9] <= pixel_colour[2].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[0] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[1] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[2] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[3] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[4] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[5] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[6] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[7] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[8] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_G[9] <= pixel_colour[1].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[0] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[1] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[2] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[3] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[4] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[5] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[6] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[7] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[8] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_B[9] <= pixel_colour[0].DB_MAX_OUTPUT_PORT_TYPE
VGA_HS <= VGA_HS~reg0.DB_MAX_OUTPUT_PORT_TYPE
VGA_VS <= VGA_VS~reg0.DB_MAX_OUTPUT_PORT_TYPE
VGA_BLANK <= VGA_BLANK~reg0.DB_MAX_OUTPUT_PORT_TYPE
VGA_SYNC <= <VCC>
VGA_CLK <= vga_clock.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|vga_adapter:VGA|vga_controller:controller|vga_address_translator:controller_translator
x[0] => mem_address[0].DATAIN
x[1] => mem_address[1].DATAIN
x[2] => mem_address[2].DATAIN
x[3] => mem_address[3].DATAIN
x[4] => mem_address[4].DATAIN
x[5] => Add1.IN18
x[6] => Add1.IN17
x[7] => Add1.IN16
y[0] => Add0.IN14
y[0] => Add1.IN20
y[1] => Add0.IN13
y[1] => Add1.IN19
y[2] => Add0.IN11
y[2] => Add0.IN12
y[3] => Add0.IN9
y[3] => Add0.IN10
y[4] => Add0.IN7
y[4] => Add0.IN8
y[5] => Add0.IN5
y[5] => Add0.IN6
y[6] => Add0.IN3
y[6] => Add0.IN4
mem_address[0] <= x[0].DB_MAX_OUTPUT_PORT_TYPE
mem_address[1] <= x[1].DB_MAX_OUTPUT_PORT_TYPE
mem_address[2] <= x[2].DB_MAX_OUTPUT_PORT_TYPE
mem_address[3] <= x[3].DB_MAX_OUTPUT_PORT_TYPE
mem_address[4] <= x[4].DB_MAX_OUTPUT_PORT_TYPE
mem_address[5] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[6] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[7] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[8] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[9] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[10] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[11] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[12] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[13] <= Add1.DB_MAX_OUTPUT_PORT_TYPE
mem_address[14] <= Add1.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|rate_dividor:rate
clkin => clkout~reg0.CLK
clkin => counter[0].CLK
clkin => counter[1].CLK
clkin => counter[2].CLK
clkin => counter[3].CLK
clkin => counter[4].CLK
clkin => counter[5].CLK
clkin => counter[6].CLK
clkin => counter[7].CLK
clkin => counter[8].CLK
clkin => counter[9].CLK
clkin => counter[10].CLK
clkin => counter[11].CLK
clkin => counter[12].CLK
clkin => counter[13].CLK
clkin => counter[14].CLK
clkin => counter[15].CLK
clkin => counter[16].CLK
clkin => counter[17].CLK
clkin => counter[18].CLK
clkin => counter[19].CLK
clkin => counter[20].CLK
clkin => counter[21].CLK
clkin => counter[22].CLK
clkin => counter[23].CLK
clkin => counter[24].CLK
clkout <= clkout~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|Draw_Grid_FSM:grid_drawer
clk => colour_out[0]~reg0.CLK
clk => colour_out[1]~reg0.CLK
clk => colour_out[2]~reg0.CLK
clk => draw~reg0.CLK
clk => wait_one_cycle.CLK
clk => y_pos[0]~reg0.CLK
clk => y_pos[1]~reg0.CLK
clk => y_pos[2]~reg0.CLK
clk => y_pos[3]~reg0.CLK
clk => y_pos[4]~reg0.CLK
clk => y_pos[5]~reg0.CLK
clk => y_pos[6]~reg0.CLK
clk => x_pos[0]~reg0.CLK
clk => x_pos[1]~reg0.CLK
clk => x_pos[2]~reg0.CLK
clk => x_pos[3]~reg0.CLK
clk => x_pos[4]~reg0.CLK
clk => x_pos[5]~reg0.CLK
clk => x_pos[6]~reg0.CLK
clk => x_pos[7]~reg0.CLK
clk => y_incr[0].CLK
clk => y_incr[1].CLK
clk => y_incr[2].CLK
clk => y_incr[3].CLK
clk => y_incr[4].CLK
clk => x_incr[0].CLK
clk => x_incr[1].CLK
clk => x_incr[2].CLK
clk => x_incr[3].CLK
clk => x_incr[4].CLK
clk => done~reg0.CLK
clk => curr_state~1.DATAIN
done <= done~reg0.DB_MAX_OUTPUT_PORT_TYPE
load_p => Selector1.IN2
load_p => Selector0.IN2
reset => ~NO_FANOUT~
start_x[0] => Add0.IN11
start_x[1] => Add0.IN10
start_x[2] => Add0.IN9
start_x[3] => Add0.IN8
start_x[4] => Add0.IN7
start_x[5] => Add0.IN6
start_x[6] => Add0.IN5
start_x[7] => Add0.IN4
start_y[0] => Add1.IN9
start_y[1] => Add1.IN8
start_y[2] => Add1.IN7
start_y[3] => Add1.IN6
start_y[4] => Add1.IN5
start_y[5] => Add1.IN4
start_y[6] => Add1.IN3
bg_colour[0] => colour_out.DATAA
bg_colour[1] => colour_out.DATAA
bg_colour[2] => colour_out.DATAA
fg_colour[0] => colour_out.DATAB
fg_colour[1] => colour_out.DATAB
fg_colour[2] => colour_out.DATAB
x_pos[0] <= x_pos[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[1] <= x_pos[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[2] <= x_pos[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[3] <= x_pos[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[4] <= x_pos[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[5] <= x_pos[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[6] <= x_pos[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[7] <= x_pos[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[0] <= y_pos[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[1] <= y_pos[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[2] <= y_pos[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[3] <= y_pos[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[4] <= y_pos[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[5] <= y_pos[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[6] <= y_pos[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
colour_out[0] <= colour_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
colour_out[1] <= colour_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
colour_out[2] <= colour_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
draw <= draw~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|Selector_Drawer_FSM:selector_drawer
clk => wait_one_cycle.CLK
clk => y_pos[0]~reg0.CLK
clk => y_pos[1]~reg0.CLK
clk => y_pos[2]~reg0.CLK
clk => y_pos[3]~reg0.CLK
clk => y_pos[4]~reg0.CLK
clk => y_pos[5]~reg0.CLK
clk => y_pos[6]~reg0.CLK
clk => x_pos[0]~reg0.CLK
clk => x_pos[1]~reg0.CLK
clk => x_pos[2]~reg0.CLK
clk => x_pos[3]~reg0.CLK
clk => x_pos[4]~reg0.CLK
clk => x_pos[5]~reg0.CLK
clk => x_pos[6]~reg0.CLK
clk => x_pos[7]~reg0.CLK
clk => draw~reg0.CLK
clk => y_incr[0].CLK
clk => y_incr[1].CLK
clk => y_incr[2].CLK
clk => y_incr[3].CLK
clk => y_incr[4].CLK
clk => x_incr[0].CLK
clk => x_incr[1].CLK
clk => x_incr[2].CLK
clk => x_incr[3].CLK
clk => x_incr[4].CLK
clk => done~reg0.CLK
clk => hex_state[0]~reg0.CLK
clk => hex_state[1]~reg0.CLK
clk => hex_state[2]~reg0.CLK
clk => hex_state[3]~reg0.CLK
clk => hex_state[4]~reg0.CLK
clk => hex_state[5]~reg0.CLK
clk => curr_state~1.DATAIN
reset => ~NO_FANOUT~
load_s => Selector1.IN3
load_s => Selector0.IN2
selector_x => next_state.OUTPUTSELECT
selector_x => next_state.OUTPUTSELECT
start_x[0] => Add0.IN11
start_x[0] => Selector27.IN6
start_x[1] => Add0.IN10
start_x[1] => Selector26.IN6
start_x[2] => Add0.IN9
start_x[2] => Selector25.IN6
start_x[3] => Add0.IN8
start_x[3] => Add6.IN10
start_x[3] => Selector24.IN6
start_x[4] => Add0.IN7
start_x[4] => Add6.IN9
start_x[4] => Selector23.IN6
start_x[5] => Add0.IN6
start_x[5] => Add6.IN8
start_x[5] => Selector22.IN6
start_x[6] => Add0.IN5
start_x[6] => Add6.IN7
start_x[6] => Selector21.IN6
start_x[7] => Add0.IN4
start_x[7] => Add6.IN6
start_x[7] => Selector20.IN6
start_y[0] => Add3.IN9
start_y[0] => Selector34.IN6
start_y[1] => Add3.IN8
start_y[1] => Selector33.IN6
start_y[2] => Add3.IN7
start_y[2] => Selector32.IN6
start_y[3] => Add1.IN8
start_y[3] => Add3.IN6
start_y[3] => Selector31.IN6
start_y[4] => Add1.IN7
start_y[4] => Add3.IN5
start_y[4] => Selector30.IN6
start_y[5] => Add1.IN6
start_y[5] => Add3.IN4
start_y[5] => Selector29.IN6
start_y[6] => Add1.IN5
start_y[6] => Add3.IN3
start_y[6] => Selector28.IN6
colour_in[0] => colour_out[0].DATAIN
colour_in[1] => colour_out[1].DATAIN
colour_in[2] => colour_out[2].DATAIN
done <= done~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[0] <= x_pos[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[1] <= x_pos[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[2] <= x_pos[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[3] <= x_pos[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[4] <= x_pos[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[5] <= x_pos[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[6] <= x_pos[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_pos[7] <= x_pos[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[0] <= y_pos[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[1] <= y_pos[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[2] <= y_pos[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[3] <= y_pos[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[4] <= y_pos[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[5] <= y_pos[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_pos[6] <= y_pos[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
colour_out[0] <= colour_in[0].DB_MAX_OUTPUT_PORT_TYPE
colour_out[1] <= colour_in[1].DB_MAX_OUTPUT_PORT_TYPE
colour_out[2] <= colour_in[2].DB_MAX_OUTPUT_PORT_TYPE
draw <= draw~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[0] <= hex_state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[1] <= hex_state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[2] <= hex_state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[3] <= hex_state[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[4] <= hex_state[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[5] <= hex_state[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|game_controller_fsm:main
confirm => next_state.DATAA
confirm => Selector19.IN3
confirm => next_state.DATAA
confirm => next_state.DATAB
load_p <= load_p~reg0.DB_MAX_OUTPUT_PORT_TYPE
load_s <= load_s~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[0] <= x_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[1] <= x_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[2] <= x_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[3] <= x_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[4] <= x_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[5] <= x_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[6] <= x_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
x_out[7] <= x_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[0] <= y_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[1] <= y_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[2] <= y_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[3] <= y_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[4] <= y_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[5] <= y_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
y_out[6] <= y_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
colour1_out[0] <= bg_colour_decoder:mybg.colour
colour1_out[1] <= bg_colour_decoder:mybg.colour
colour1_out[2] <= bg_colour_decoder:mybg.colour
colour2_out[0] <= fg_colour_decoder:myfg.colour
colour2_out[1] <= fg_colour_decoder:myfg.colour
colour2_out[2] <= fg_colour_decoder:myfg.colour
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => next_state.DATAB
done_p => Selector1.IN2
done_p => Selector2.IN2
done_p => Selector3.IN2
done_p => Selector4.IN2
done_p => Selector5.IN2
done_p => Selector6.IN2
done_p => Selector7.IN2
done_p => Selector8.IN2
done_p => Selector9.IN2
done_p => Selector10.IN2
done_p => Selector11.IN2
done_p => Selector12.IN2
done_p => Selector13.IN2
done_p => Selector14.IN2
done_p => Selector15.IN2
done_p => Selector16.IN2
done_s => Selector18.IN3
done_s => Selector17.IN2
selector[0] => Equal0.IN3
selector[0] => Decoder0.IN1
selector[0] => Decoder2.IN3
selector[0] => Mux0.IN19
selector[0] => Mux1.IN19
selector[0] => Mux2.IN19
selector[0] => Mux3.IN19
selector[0] => Mux4.IN19
selector[0] => Mux5.IN19
selector[0] => Mux6.IN19
selector[0] => Mux7.IN19
selector[0] => Mux8.IN19
selector[0] => Mux9.IN19
selector[0] => Mux10.IN19
selector[0] => Mux11.IN6
selector[0] => Mux12.IN6
selector[0] => Mux13.IN7
selector[0] => Mux14.IN7
selector[0] => Mux15.IN7
selector[0] => Mux16.IN7
selector[0] => Mux17.IN6
selector[0] => Mux18.IN6
selector[0] => Mux19.IN7
selector[0] => Mux20.IN7
selector[0] => Mux21.IN8
selector[0] => Mux22.IN8
selector[0] => Mux23.IN8
selector[0] => Mux24.IN8
selector[0] => Mux25.IN7
selector[0] => Mux26.IN7
selector[0] => Mux27.IN7
selector[0] => Mux28.IN7
selector[0] => Mux29.IN8
selector[0] => Mux30.IN8
selector[0] => Mux31.IN8
selector[0] => Mux32.IN8
selector[0] => Mux33.IN7
selector[0] => Mux34.IN7
selector[0] => Mux35.IN6
selector[0] => Mux36.IN6
selector[0] => Mux37.IN7
selector[0] => Mux38.IN7
selector[0] => Mux39.IN7
selector[0] => Mux40.IN7
selector[0] => Mux41.IN6
selector[0] => Mux42.IN6
selector[0] => Selector55.IN5
selector[0] => Selector60.IN5
selector[0] => selector_position[0].DATAIN
selector[1] => Equal0.IN2
selector[1] => Decoder0.IN0
selector[1] => Decoder2.IN2
selector[1] => Mux0.IN18
selector[1] => Mux1.IN18
selector[1] => Mux2.IN18
selector[1] => Mux3.IN18
selector[1] => Mux4.IN18
selector[1] => Mux5.IN18
selector[1] => Mux6.IN18
selector[1] => Mux7.IN18
selector[1] => Mux8.IN18
selector[1] => Mux9.IN18
selector[1] => Mux10.IN18
selector[1] => Mux11.IN5
selector[1] => Mux12.IN5
selector[1] => Mux13.IN6
selector[1] => Mux14.IN6
selector[1] => Mux15.IN6
selector[1] => Mux16.IN6
selector[1] => Mux17.IN5
selector[1] => Mux18.IN5
selector[1] => Mux19.IN6
selector[1] => Mux20.IN6
selector[1] => Mux21.IN7
selector[1] => Mux22.IN7
selector[1] => Mux23.IN7
selector[1] => Mux24.IN7
selector[1] => Mux25.IN6
selector[1] => Mux26.IN6
selector[1] => Mux27.IN6
selector[1] => Mux28.IN6
selector[1] => Mux29.IN7
selector[1] => Mux30.IN7
selector[1] => Mux31.IN7
selector[1] => Mux32.IN7
selector[1] => Mux33.IN6
selector[1] => Mux34.IN6
selector[1] => Mux35.IN5
selector[1] => Mux36.IN5
selector[1] => Mux37.IN6
selector[1] => Mux38.IN6
selector[1] => Mux39.IN6
selector[1] => Mux40.IN6
selector[1] => Mux41.IN5
selector[1] => Mux42.IN5
selector[1] => Selector54.IN5
selector[1] => Selector58.IN2
selector[1] => Selector59.IN2
selector[1] => selector_position[1].DATAIN
selector[2] => Equal0.IN1
selector[2] => Decoder1.IN1
selector[2] => Decoder2.IN1
selector[2] => Mux0.IN17
selector[2] => Mux1.IN17
selector[2] => Mux2.IN17
selector[2] => Mux3.IN17
selector[2] => Mux4.IN17
selector[2] => Mux5.IN17
selector[2] => Mux6.IN17
selector[2] => Mux7.IN17
selector[2] => Mux8.IN17
selector[2] => Mux9.IN17
selector[2] => Mux10.IN17
selector[2] => Mux11.IN4
selector[2] => Mux12.IN4
selector[2] => Mux13.IN5
selector[2] => Mux14.IN5
selector[2] => Mux15.IN5
selector[2] => Mux16.IN5
selector[2] => Mux17.IN4
selector[2] => Mux18.IN4
selector[2] => Mux19.IN5
selector[2] => Mux20.IN5
selector[2] => Mux21.IN6
selector[2] => Mux22.IN6
selector[2] => Mux23.IN6
selector[2] => Mux24.IN6
selector[2] => Mux25.IN5
selector[2] => Mux26.IN5
selector[2] => Mux27.IN5
selector[2] => Mux28.IN5
selector[2] => Mux29.IN6
selector[2] => Mux30.IN6
selector[2] => Mux31.IN6
selector[2] => Mux32.IN6
selector[2] => Mux33.IN5
selector[2] => Mux34.IN5
selector[2] => Mux35.IN4
selector[2] => Mux36.IN4
selector[2] => Mux37.IN5
selector[2] => Mux38.IN5
selector[2] => Mux39.IN5
selector[2] => Mux40.IN5
selector[2] => Mux41.IN4
selector[2] => Mux42.IN4
selector[2] => Selector64.IN2
selector[2] => selector_position[2].DATAIN
selector[3] => Equal0.IN0
selector[3] => Decoder1.IN0
selector[3] => Decoder2.IN0
selector[3] => Mux0.IN16
selector[3] => Mux1.IN16
selector[3] => Mux2.IN16
selector[3] => Mux3.IN16
selector[3] => Mux4.IN16
selector[3] => Mux5.IN16
selector[3] => Mux6.IN16
selector[3] => Mux7.IN16
selector[3] => Mux8.IN16
selector[3] => Mux9.IN16
selector[3] => Mux10.IN16
selector[3] => Mux11.IN3
selector[3] => Mux12.IN3
selector[3] => Mux13.IN4
selector[3] => Mux14.IN4
selector[3] => Mux15.IN4
selector[3] => Mux16.IN4
selector[3] => Mux17.IN3
selector[3] => Mux18.IN3
selector[3] => Mux19.IN4
selector[3] => Mux20.IN4
selector[3] => Mux21.IN5
selector[3] => Mux22.IN5
selector[3] => Mux23.IN5
selector[3] => Mux24.IN5
selector[3] => Mux25.IN4
selector[3] => Mux26.IN4
selector[3] => Mux27.IN4
selector[3] => Mux28.IN4
selector[3] => Mux29.IN5
selector[3] => Mux30.IN5
selector[3] => Mux31.IN5
selector[3] => Mux32.IN5
selector[3] => Mux33.IN4
selector[3] => Mux34.IN4
selector[3] => Mux35.IN3
selector[3] => Mux36.IN3
selector[3] => Mux37.IN4
selector[3] => Mux38.IN4
selector[3] => Mux39.IN4
selector[3] => Mux40.IN4
selector[3] => Mux41.IN3
selector[3] => Mux42.IN3
selector[3] => Selector63.IN5
selector[3] => Selector65.IN5
selector[3] => Selector66.IN2
selector[3] => selector_position[3].DATAIN
direction[0] => Decoder3.IN3
direction[1] => Decoder3.IN2
direction[2] => Decoder3.IN1
direction[3] => Decoder3.IN0
clk => hex_state[0]~reg0.CLK
clk => hex_state[1]~reg0.CLK
clk => hex_state[2]~reg0.CLK
clk => hex_state[3]~reg0.CLK
clk => hex_state[4]~reg0.CLK
clk => hex_state[5]~reg0.CLK
clk => curr_state~1.DATAIN
clk => player_input[0].CLK
clk => player_input[1].CLK
clk => selector_position[0].CLK
clk => selector_position[1].CLK
clk => selector_position[2].CLK
clk => selector_position[3].CLK
clk => fg_colour[0].CLK
clk => fg_colour[1].CLK
clk => fg_colour[2].CLK
clk => bg_colour[0].CLK
clk => bg_colour[1].CLK
clk => bg_colour[2].CLK
clk => s~reg0.CLK
clk => player_turn~reg0.CLK
clk => selector_x~reg0.CLK
clk => score_b[0]~reg0.CLK
clk => score_b[1]~reg0.CLK
clk => score_b[2]~reg0.CLK
clk => score_b[3]~reg0.CLK
clk => score_b[4]~reg0.CLK
clk => score_y[0]~reg0.CLK
clk => score_y[1]~reg0.CLK
clk => score_y[2]~reg0.CLK
clk => score_y[3]~reg0.CLK
clk => score_y[4]~reg0.CLK
clk => y_out[0]~reg0.CLK
clk => y_out[1]~reg0.CLK
clk => y_out[2]~reg0.CLK
clk => y_out[3]~reg0.CLK
clk => y_out[4]~reg0.CLK
clk => y_out[5]~reg0.CLK
clk => y_out[6]~reg0.CLK
clk => x_out[0]~reg0.CLK
clk => x_out[1]~reg0.CLK
clk => x_out[2]~reg0.CLK
clk => x_out[3]~reg0.CLK
clk => x_out[4]~reg0.CLK
clk => x_out[5]~reg0.CLK
clk => x_out[6]~reg0.CLK
clk => x_out[7]~reg0.CLK
clk => load_s~reg0.CLK
clk => load_p~reg0.CLK
clk => cells[0].CLK
clk => cells[1].CLK
clk => cells[2].CLK
clk => cells[3].CLK
clk => cells[4].CLK
clk => cells[5].CLK
clk => cells[6].CLK
clk => cells[7].CLK
clk => cells[8].CLK
clk => cells[9].CLK
clk => cells[10].CLK
clk => cells[11].CLK
clk => cells[12].CLK
clk => cells[13].CLK
clk => cells[14].CLK
clk => cells[15].CLK
clk => cells[16].CLK
clk => cells[17].CLK
clk => cells[18].CLK
clk => cells[19].CLK
clk => cells[20].CLK
clk => cells[21].CLK
clk => cells[22].CLK
clk => cells[23].CLK
clk => cells[24].CLK
clk => cells[25].CLK
clk => cells[26].CLK
clk => cells[27].CLK
clk => cells[28].CLK
clk => cells[29].CLK
clk => cells[30].CLK
clk => cells[31].CLK
clk => cells[32].CLK
clk => cells[33].CLK
clk => cells[34].CLK
clk => cells[35].CLK
clk => cells[36].CLK
clk => cells[37].CLK
clk => cells[38].CLK
clk => cells[39].CLK
clk => cells[40].CLK
clk => cells[41].CLK
clk => cells[42].CLK
clk => cells[43].CLK
clk => cells[44].CLK
clk => cells[45].CLK
clk => cells[46].CLK
clk => cells[47].CLK
reset => next_state.DRAW_BOARD_0.OUTPUTSELECT
reset => next_state.WAIT_BOARD_0.OUTPUTSELECT
reset => next_state.DRAW_BOARD_1.OUTPUTSELECT
reset => next_state.WAIT_BOARD_1.OUTPUTSELECT
reset => next_state.DRAW_BOARD_2.OUTPUTSELECT
reset => next_state.WAIT_BOARD_2.OUTPUTSELECT
reset => next_state.DRAW_BOARD_3.OUTPUTSELECT
reset => next_state.WAIT_BOARD_3.OUTPUTSELECT
reset => next_state.DRAW_BOARD_4.OUTPUTSELECT
reset => next_state.WAIT_BOARD_4.OUTPUTSELECT
reset => next_state.DRAW_BOARD_5.OUTPUTSELECT
reset => next_state.WAIT_BOARD_5.OUTPUTSELECT
reset => next_state.DRAW_BOARD_6.OUTPUTSELECT
reset => next_state.WAIT_BOARD_6.OUTPUTSELECT
reset => next_state.DRAW_BOARD_7.OUTPUTSELECT
reset => next_state.WAIT_BOARD_7.OUTPUTSELECT
reset => next_state.DRAW_BOARD_8.OUTPUTSELECT
reset => next_state.WAIT_BOARD_8.OUTPUTSELECT
reset => next_state.DRAW_BOARD_9.OUTPUTSELECT
reset => next_state.WAIT_BOARD_9.OUTPUTSELECT
reset => next_state.DRAW_BOARD_10.OUTPUTSELECT
reset => next_state.WAIT_BOARD_10.OUTPUTSELECT
reset => next_state.DRAW_BOARD_11.OUTPUTSELECT
reset => next_state.WAIT_BOARD_11.OUTPUTSELECT
reset => next_state.DRAW_BOARD_12.OUTPUTSELECT
reset => next_state.WAIT_BOARD_12.OUTPUTSELECT
reset => next_state.DRAW_BOARD_13.OUTPUTSELECT
reset => next_state.WAIT_BOARD_13.OUTPUTSELECT
reset => next_state.DRAW_BOARD_14.OUTPUTSELECT
reset => next_state.WAIT_BOARD_14.OUTPUTSELECT
reset => next_state.DRAW_BOARD_15.OUTPUTSELECT
reset => next_state.WAIT_BOARD_15.OUTPUTSELECT
reset => next_state.DRAW_SELECTOR.OUTPUTSELECT
reset => next_state.WAIT_SELECTOR_DONE.OUTPUTSELECT
reset => next_state.WAIT_PLAYER.OUTPUTSELECT
reset => next_state.WAIT_PLAYER_UP.OUTPUTSELECT
reset => next_state.DO_LOGIC.OUTPUTSELECT
reset => next_state.CLEAN_UP.OUTPUTSELECT
reset => curr_state.RESET.DATAIN
reset => Selector0.IN2
hex_state[0] <= hex_state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[1] <= hex_state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[2] <= hex_state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[3] <= hex_state[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[4] <= hex_state[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex_state[5] <= hex_state[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
s <= s~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_y[0] <= score_y[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_y[1] <= score_y[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_y[2] <= score_y[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_y[3] <= score_y[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_y[4] <= score_y[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_b[0] <= score_b[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_b[1] <= score_b[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_b[2] <= score_b[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_b[3] <= score_b[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
score_b[4] <= score_b[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
selector_x <= selector_x~reg0.DB_MAX_OUTPUT_PORT_TYPE
player_turn <= player_turn~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|game_controller_fsm:main|fg_colour_decoder:myfg
cell_data[0] => Decoder0.IN2
cell_data[1] => Decoder0.IN1
cell_data[2] => Decoder0.IN0
colour[0] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
colour[1] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
colour[2] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|game_controller_fsm:main|bg_colour_decoder:mybg
cell_data[0] => Decoder0.IN2
cell_data[1] => Decoder0.IN1
cell_data[2] => Decoder0.IN0
colour[0] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
colour[1] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
colour[2] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|pixel_drawing_MUX:mux
s => Decoder0.IN0
draw_enable[0] => enable.DATAB
draw_enable[1] => enable.DATAA
colour_in[0] => ~NO_FANOUT~
colour_in[1] => ~NO_FANOUT~
colour_in[2] => ~NO_FANOUT~
colour_in[3] => colour_out.DATAA
colour_in[4] => colour_out.DATAA
colour_in[5] => colour_out.DATAA
x_in[0] => x_out.DATAB
x_in[1] => x_out.DATAB
x_in[2] => x_out.DATAB
x_in[3] => x_out.DATAB
x_in[4] => x_out.DATAB
x_in[5] => x_out.DATAB
x_in[6] => x_out.DATAB
x_in[7] => x_out.DATAB
x_in[8] => x_out.DATAA
x_in[9] => x_out.DATAA
x_in[10] => x_out.DATAA
x_in[11] => x_out.DATAA
x_in[12] => x_out.DATAA
x_in[13] => x_out.DATAA
x_in[14] => x_out.DATAA
x_in[15] => x_out.DATAA
y_in[0] => y_out.DATAB
y_in[1] => y_out.DATAB
y_in[2] => y_out.DATAB
y_in[3] => y_out.DATAB
y_in[4] => y_out.DATAB
y_in[5] => y_out.DATAB
y_in[6] => y_out.DATAB
y_in[7] => y_out.DATAA
y_in[8] => y_out.DATAA
y_in[9] => y_out.DATAA
y_in[10] => y_out.DATAA
y_in[11] => y_out.DATAA
y_in[12] => y_out.DATAA
y_in[13] => y_out.DATAA
colour_out[0] <= colour_out.DB_MAX_OUTPUT_PORT_TYPE
colour_out[1] <= colour_out.DB_MAX_OUTPUT_PORT_TYPE
colour_out[2] <= colour_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[0] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[1] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[2] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[3] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[4] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[5] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[6] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
x_out[7] <= x_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[0] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[1] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[2] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[3] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[4] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[5] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
y_out[6] <= y_out.DB_MAX_OUTPUT_PORT_TYPE
enable <= enable.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex0
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex1
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex2
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex3
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex4
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex5
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex6
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|CastleChaos|hex_decoder:hex7
hex_digit[0] => Decoder0.IN4
hex_digit[1] => Decoder0.IN3
hex_digit[2] => Decoder0.IN2
hex_digit[3] => Decoder0.IN1
hex_digit[4] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


