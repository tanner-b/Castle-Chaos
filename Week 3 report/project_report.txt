CSCB58 Project Report: Winter 2019

Team Member A
-------------
First Name: Tanner
Last Name: Bergeron
Student Number: 1003924872
UofT E-mail Address: tanner.bergeron@mail.utoronto.ca


Team Member B
-------------
First Name: Sofia
Last Name: Ilina
Student Number: 1003912581
UofT E-mail Address: sofia.ilina@mail.utoronto.ca

Project Plan
--------

Project Title: Castle Chaos

Provide a one paragraph description of your project:

	Imagine chess on a 4x4 game board, but only with castle pieces that can only move 1 space at a time.
	The game has 2 players, each with 4 starting castle pieces on thier respective side of the board.
	During each player's turn, they move one of their castle pieces one space (Up, Down, Left, Right)
	and try to "crush" one of the other player's castles. Your castle piece becomes crushed if an opposing
	player's castle moves onto the square that your piece currently occupies. The object of the game is to
	be the only player with castle pieces on the board. 

What is your plan for the first week?
	
	We will be using VGA graphics to display the state of the game board. We intend to define the registers
	that we will use as memory to hold the current state of the game. Once we have a game state, we can then
	create the drawing code that will draw the state of the game to the screen with a black and white checkerboard
	as the game board, and yellow and blue castle pieces for each of the teams respectively.
	
	The game state should keep track of:
	- Where each of the 8 pieces are on the 4x4 board
	- Which pieces belong to who
	- Which grid the selector cursor is currently highlighting
	
	We will draw graphics such as
	- The outline of the game board
	- The black and white checkerboard pattern that is the 4x4 board
	- The 8 blue and yellow castle pieces at their respective locations on the board

What is your plan for the second week?
	
	We intend to create the FSM that controls the flow of the game loop. 
	In essence we should have the following structure:
	
           +-----------------------------------------------------------+
           V                                                           |
    (draw graphics) --> (wait for input) --SW[17:14]--> (update cursor position)
           ^                  | ^
           |                  | +---------------------------------------------------NOT_VALID
           |                  |                                                          |
           |                  +---- KEY[3:0] == 1 --> (check if move is valid) ----------+
           |                                                          			         |
           +------------------- (update game board) <------------------------------- IS_VALID


	We will have the switches SW[17:16] to select one of the 4 letter coordinates of the 
	grid and SW[15:14] to select the numerical coordinate. These switches can be used to select
	one of the 16 possible cells containing a castle you want to move while SW[0]=0.
	Each time a switch input from SW[17:14] is changed, the board will automatically update
	the highlighting of the cell which has been selected. Once SW[0] is changed to 1 and if the
	grid selected is valid (it contains a castle), the game will wait for a direction input:
	KEY[3:2] is UP/DOWN, KEY[1:0] is LEFT/RIGHT. When that signal is received and if it is
	valid, the gameboard gets updated with the new game state.

	Keys [3:0] then become your {U, D, L, R} controls to where you want the selected
	piece to go. If the selected piece lands on a cell occupied by another piece then
	the other piece is crushed and is "removed" from the board.

What is your plan for the third week?

	Week 3 is where we plan to add the "quality of life" improvements to the game. At this
	point, there is no logic to prevent you from crushing your own pieces, or having the 
	piece locations wrap around to other locations because of bit overflow. We will also try to
	keep track of the current score on the screen. We can also add flashing lights to indicate
	a piece being crushed, or if a move is invalid, etc. There are many things we can do
	and we will see how much we have completed from the previous two weeks and decide how
	much more we can do from there.

What is your backup plan if things don’t work out as planned?

	We would cut the "quality of life" features of the game and not worry about many of the
	failsafe checking that is involved with making sure a dumb player cant make illegal moves.
	Essentially cut week 3 features until we are able to accomplish weeks 1 and 2.

Weekly Reports
--------------
<In this space, provide a report each week of what worked and what didn't, and what (if any) changes were made to your proposal)>

Week 1:
    - We coded up an FSM that controls drawing individual grid pieces of the board, given a background tile color and the figure color
      (blue/yellow if the grid contains a figure, black/white if the grid is empty, the color is the same as its background)
      This FSM also takes as input a top left corner of the grid piece and draws the whole grid and its contents in that location.
    - We coded up another FSM which will be used to display the selected grid piece when the user will be choosing which piece to
      move on the board. This will just create a 1-pixel wide outline on the interior of the selected grid. We have not tested this
      module yet because we did not write any logic to select a grid yet.
    - Finally, the most important FSM we coded up is the game logic FSM. It will still require future modifications and improvements.
      For now all it does is draws the initial state of the board with all blue figures aligned on the far left column of the board,
      and all 4 yellow figures ligned up on the far right column of the board. Next week we plan to work on implementing the logic to
      move a selected piece to a valid new position, and possibly destroy one of the opponent's pieces
    - We created the memory to store board state data, so that when that data gets modified, these changes will be displayed on the screen.
    - The coloured pieces based are drawn dynamically on the game board, depending on their position on the grid 
      (for now only can be changed manually).
    - We completed everything we said we were going to in the week 1 proposal.


Week 2:
    - We created a module which controls which parts of our code send x/y coordinates and colour values to the VGA pixel drawer. For now
      it makes sure the Selector Drawer and Grid Drawer don't write output to the same registers at once, but it might need to be later
      developed to include the "lost" piece drawer in this equation, if we get to implement that by next week
    - We connected the Selector module which we started working on last week to the overal logic of the game, so now when a user
      selects a position on the board, there appears a red outline on this grid, and if the user selects a different grid position,
      the current selector disappears and the new one appears in the correct location. The issue with this module is that the selector 
      is not drawn proportionally to some of the bottom grid positions, but this was not a major drawback so we will fix that later, if
      we have time.
    - We wrote the game logic for controling each grid on the board, so that if it is selected and the user inputs a direction from 
      KEY[3:0] (up/down/left/right) and the cell contains a piece and the move is valid, then the piece will disappear from the selected
      grid position and reappear on the neighboring grid above / below / to the left / to the right of its original position
    - As of now we can move selected grid boards containing blue or yellow pieces up / down / left or right, but we have a lot of bugs
      in this part of our code (some grid cells just have their figures disappear or appear in random places), which we still need to fix
    - We are considering a change to our project which will display score on the HEX display for each player (Y / b) and possibly drawing
      the "lost" pieces to the side of the game board each time a player looses a piece

     
Week 3:
    - This week we were successful in keeping track of the score in the event that one player's piece takes over the territory of another
      player's piece, and this score is being displayed on the HEX displays, beside letters "Y" and "b" (we needed to create a new value
      in the hex decoder to represent "Y").
    - We were also successful in implementing the functionality of drawing a red "X" over a selected grid if the user is trying to make an
      invalid move, such as when the selected grid is blank or when the piece is at the edge of the board and the user instructs it to
      move beyond the game board territory.
    - Unfortunately, at first all the extra game logic we tried to implement significantly disrupted the functionality of our project, so
      when we were debugging it during class time we found out that the board started freezing and being irresponsive after several  turns
      and there were random patterns drawn outside of the territory we allocated for the board. This seemed very irrational because this
      broke the existing logic we had for displaying the game, even though those parts were not altered since last week. Our hypothesis was
      that somehow there was residual data left over in the wires, which was not overwritten in time because our clock signals were too 
      short and we were trying to process complicated and bulky logic within a single clock cycle. After some time we gave up debugging the
      current version of the file we worked on for the past week because there were too many unexpected things going on, that we decided to
      revert back to the file version from week 2. We added in the new parts to the old file incrementally, trying to see which part broke
      the logic, and turns out it was the module called game_logic. We tried to re-write some of the sections from scratch, but that did not
      help significantly. Then after the hypothesis of too much logic being processed in a single clock cycle arose, we decided to go back 
      to the week 3 file version and split up a large nested case statement in an FSM into smaller separate states. That seemed to help
      somewhat, so we tried to encorporate as much of the new logic written this past week such that we have minimal odd bugs. 
    - We also added a rate divider which logic we borrowed and modified from: 
      https://electronics.stackexchange.com/questions/202876/how-can-i-generate-a-1-hz-clock-from-50-mhz-clock-coming-from-an-altera-board
      which converted the input clock signal to a 10 times slower signal which controls 3 of our FSMs.


Link to git repo: https://github.com/tanner-b/Castle-Chaos

References
----------
We used the VGA files provided to us by Professor Moshe for lab 6, which helped us display our game on the screen. We used his black.mif
file which fills the whole screen initially with black pixels. The idea for a rate divider module which we used and modified came from:
https://electronics.stackexchange.com/questions/202876/how-can-i-generate-a-1-hz-clock-from-50-mhz-clock-coming-from-an-altera-board
The rest of the code is completely our own.